generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model assignment {
  id          Int             @id @default(autoincrement())
  classroomId Int
  title       String
  description String
  type        assignment_type
  dueDate     DateTime?
  createdAt   DateTime        @default(now())

  completions assignmentcompletion[]
  classroom   classroom              @relation(fields: [classroomId], references: [id])

  category String? // for quizzes
  subtopic String? // for quizzes

  bookId       Int? // for reading assignments: refers to index in book-content
  chapterIndex Int? // for reading assignments: refers to chapter in book
}

model bookcontent {
  id              Int     @id @default(autoincrement())
  chapters        Int
  chapterContents String
  chapterTitle    String?
}

model booklist {
  index  Int    @id @default(autoincrement())
  title  String
  author String
  cover  String
}

model classroom {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique(map: "Classroom_code_key")
  teacherId Int
  createdAt DateTime @default(now())

  assignments assignment[]
  students    studentclassroom[]

  @@index([teacherId], map: "Classroom_teacherId_fkey")
}

model grammarprogress {
  id        Int      @id @default(autoincrement())
  osis      Int?
  anonId    String? // for anonymous quiz logging
  concept   String
  subTopic  String
  score     Int
  numQuestions Int?   // optional: total questions in the attempt
  durationMs  Int?    // optional: time spent on the attempt (ms)
  isAi        Boolean? @default(false) // optional: tag AI-generated quizzes
  hintsUsed    Int?      // number of hints used in this attempt
  createdAt DateTime @default(now())


  @@index([anonId])
  @@index([concept, subTopic])
}

model aifeedback {
  id        Int      @id @default(autoincrement())
  anonId    String?
  concept   String
  subTopic  String
  prompt    String
  issue     String
  createdAt DateTime @default(now())

  @@index([anonId])
  @@index([createdAt])
}

model quizprogress {
  id        Int      @id @default(autoincrement())
  userId    Int?
  anonId    String?
  category  String
  subtopic  String
  score     Int
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([anonId])
}

model studentclassroom {
  id          Int     @id @default(autoincrement())
  studentId   Int? // ðŸ‘ˆ now optional
  anonId      String? // ðŸ‘ˆ NEW
  classroomId Int

  student   user?     @relation(fields: [studentId], references: [id])
  classroom classroom @relation(fields: [classroomId], references: [id])

  @@index([classroomId], map: "StudentClassroom_classroomId_fkey")
  @@index([studentId], map: "StudentClassroom_studentId_fkey")
  @@index([anonId])
}

model uploadedtext {
  id             Int              @id @default(autoincrement())
  userId         Int?
  anonId         String?
  title          String
  content        String
  password       String? // Optional password
  createdAt      DateTime         @default(now())
  uploadview     uploadview[]
  uploadunlock   uploadunlock[]
  uploadprogress uploadprogress[] // back relation for uploadprogress
  visibility     upload_visibility @default(PRIVATE)
  shareCode      String?           @unique

  @@index([userId])
  @@index([anonId])
  @@index([visibility])
}

enum upload_visibility {
  PRIVATE
  CODED
  PUBLIC
}

model user {
  id        Int       @id @default(autoincrement())
  email     String    @unique(map: "User_email_key")
  password  String
  firstName String
  lastName  String
  grade     Int
  createdAt DateTime  @default(now())
  role      user_role @default(STUDENT)

  completions     assignmentcompletion[]
  studentClasses  studentclassroom[]
  readingprogress readingprogress[]
}

model assignmentcompletion {
  id           Int       @id @default(autoincrement())
  assignmentId Int
  userId       Int?
  anonId       String?
  completedAt  DateTime?
  quizScore    Int?

  assignment assignment @relation(fields: [assignmentId], references: [id])
  user       user?      @relation(fields: [userId], references: [id])

  @@unique([anonId, assignmentId]) //  Prevent duplicate completions for anonymous users
  @@index([assignmentId])
  @@index([userId])
  @@index([anonId])
}

model readingprogress {
  id            Int      @id @default(autoincrement())
  userId        Int?
  anonId        String?
  bookIndex     Int
  chapterIndex  Int
  sentenceIndex Int?
  timeMs        Int?
  updatedAt     DateTime @updatedAt
  completedAt   DateTime @default(now())
  user user? @relation(fields: [userId], references: [id])
  @@unique([anonId, bookIndex, chapterIndex])
  @@index([userId])
  @@index([anonId])
  @@index([bookIndex, chapterIndex])
}


enum assignment_type {
  BOOK
  QUIZ
  UPLOAD
}

enum user_role {
  STUDENT
  TEACHER
}

model uploadview {
  id       Int      @id @default(autoincrement())
  anonId   String
  uploadId Int
  viewedAt DateTime @default(now())

  uploadedtext uploadedtext @relation(fields: [uploadId], references: [id])

  @@unique([anonId, uploadId])
  @@index([anonId])
  @@index([uploadId])
}

model uploadunlock {
  id        Int      @id @default(autoincrement())
  anonId    String
  uploadId  Int
  createdAt DateTime @default(now())

  uploadedtext uploadedtext @relation(fields: [uploadId], references: [id])

  @@unique([anonId, uploadId])
  @@index([anonId])
  @@index([uploadId])
}

model uploadprogress {
  id         Int      @id @default(autoincrement())
  anonId     String
  uploadId   Int
  paraIndex  Int      @default(0)
  charOffset Int      @default(0)
  updatedAt  DateTime @updatedAt
  timeMs     Int      @default(0)

  uploadedtext uploadedtext @relation(fields: [uploadId], references: [id])

  @@unique([anonId, uploadId])
  @@index([anonId])
  @@index([uploadId])
}

model quizfeedback {
  id        Int      @id @default(autoincrement())
  anonId    String?
  concept   String
  subTopic  String
  prompt    String
  issue     String
  createdAt DateTime @default(now())

  @@index([anonId])
  @@index([concept, subTopic, createdAt])
}

model uploadunlockattempt {
  id          Int      @id @default(autoincrement())
  anonId      String
  uploadId    Int
  count       Int      @default(0)
  lockedUntil DateTime?
  updatedAt   DateTime @updatedAt

  @@unique([anonId, uploadId])
  @@index([anonId])
  @@index([uploadId])
}